[
  {
    "objectID": "contents.html",
    "href": "contents.html",
    "title": "Contents",
    "section": "",
    "text": "Note\n\n\n\nFor the past several decades, the primary languge used in the lab was MATLAB. Starting from 2021, there’s been a combined effort to use Julia for new projects in the lab - for it’s promised speed and intuitive mathematical-style language syntax. However, Julia being a new language, the ecosystem lacks any equivalent for many of the mature Psychometrics packages available in R. Also, most of PI’s previous software are written in MATLAB. Hence, for the time being we use MATLAB, R, and Julia depending on the needs of the project, but the plan is to completely move to Julia in the future.\n\n\n\n\n\nGetting Started in Julia\nSetting up Julia via juliaup\n\n\n\n\n\nLinear Algebra - SVD (10/10/2022)\n\n\n\n\n\nList of R Packages used in the Lab"
  },
  {
    "objectID": "contents.html#books",
    "href": "contents.html#books",
    "title": "Contents",
    "section": "Books",
    "text": "Books\n\n[Recomended Books in Cognitive Diagnostic Modeling]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "COINS Lab Wiki",
    "section": "",
    "text": "Welcome to COINS Lab Wiki. COINS Lab Wiki was setup to consolidate all the tutorials, tools, and resources, that would be helpful for both current & future members and collaborators, at one place.\nThis wiki was initially set up on February 18, 2022 by Athul Sudheesh using Franklin.jl (A Julia based static site generator). This was later moved to Quarto (A more advanced and easier open-source scientific & publishing system) on July 14, 2022.\n\nContributing to this Wiki\nIf you want to direclty contribute to this wiki, you need to familiaze yourself with how to use the Quarto publishing system and the synatx for makrdown files. The documentation for Quarto can be found here and markdown syntax here.\n\n\nWorking with Github\n\nFirst time users\n\nSetup your GitHub account (if you already haven’t) and share your GitHub ID with the Principal Investigator or one of the senior PhD students in the lab. Inform them of your interest in contributing to the lab wiki. Either the PI or one of the senior PhD students will add you to the wiki repository as a contributor.\nInstall Github Desktop and link it with your Github profile.\nGo to https://github.com/coinslab/coinslab.github.io and click on Code -> Open with Github Desktop\n\n\nThis should create a clone of the Knowledge-Base repository in your local machine.\n\nNow you can go to the file location in your computer where you have cloned the coinslab.github.io repository.\nYou can create contents for this site as a Quarto Markdown file(.qmd) inside the pages folder in coinslab.github.io. You can use VS Code to create and edit the .qmd files.\nOnce you are done with writing/updating your section, you can commit your changes and push the changes to the Github using your Github Desktop client. Now inform the Senior Investigator who is in charge of this site. He/She will build and publish the updates\n\n\n\nExperienced users\n\nIf you are not contributing for the first time, always fetch from the cloud and make sure everything is in-sync with the cloud, before beginning to work on the documentation."
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#before-we-start",
    "href": "pages/CLA/slides/Lec1.html#before-we-start",
    "title": "Computational Linear Algebra",
    "section": "Before we start…",
    "text": "Before we start…\n\nCreate dedicated project environments for different projects\nActivate your project environment before you start working\n\n\nusing Pkg\nPkg.activate(\".\")\n\n\nTo add a package:\n\n\nusing Pkg\nPkg.add(\"PkgName\")"
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#matrices-are-everywhere",
    "href": "pages/CLA/slides/Lec1.html#matrices-are-everywhere",
    "title": "Computational Linear Algebra",
    "section": "Matrices are everywhere",
    "text": "Matrices are everywhere\n\n\n\nTabular Data\n\n\n\n\nImages\n\n\n\n\n\nGraph Models\n\n\n\n\n\n\nMarkov Chains"
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#images-as-matrices",
    "href": "pages/CLA/slides/Lec1.html#images-as-matrices",
    "title": "Computational Linear Algebra",
    "section": "Images as Matrices",
    "text": "Images as Matrices\nLoading Images\n\n# Packages for handling images \nusing Images, ImageIO, ImageMagick \n# First time installation of Images package \n# could take couple of minutes.\n\n\nDefining path to files\n\n\ncat = joinpath(pwd(),\"images\", \"cat.1.jpg\")\n\n\nLoading the image\n\n\ncatimg = load(cat)"
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#images-as-matrices-1",
    "href": "pages/CLA/slides/Lec1.html#images-as-matrices-1",
    "title": "Computational Linear Algebra",
    "section": "Images as Matrices",
    "text": "Images as Matrices\nImages are Multidimensional Matrices\n\n[Height x Width] x Color\n\n\nm,n = size(catimg)\n\n(280, 300)\n\n\n\nr = RGB.(red.(catimg), zeros(m,n), zeros(m,n))\ng = RGB.(zeros(m,n), green.(catimg), zeros(m,n))\nb = RGB.(zeros(m,n), zeros(m,n), blue.(catimg))"
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#images-as-matrices-2",
    "href": "pages/CLA/slides/Lec1.html#images-as-matrices-2",
    "title": "Computational Linear Algebra",
    "section": "Images as Matrices",
    "text": "Images as Matrices\nImages are Multidimensional Matrices\n\nr .+ b .+ g \n\n\n\n\n\nMany a times we do machine learning after turning images into GrayScale\n\n\nGray.(catimg)"
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#images-as-matrices-3",
    "href": "pages/CLA/slides/Lec1.html#images-as-matrices-3",
    "title": "Computational Linear Algebra",
    "section": "Images as Matrices",
    "text": "Images as Matrices\nImages are Multidimensional Matrices\n\nFloat64.(Gray.(catimg))\n\n280×300 Matrix{Float64}:\n 0.164706   0.164706   0.168627   0.172549   …  0.788235  0.768627  0.764706\n 0.168627   0.168627   0.168627   0.172549      0.772549  0.756863  0.74902\n 0.168627   0.168627   0.168627   0.168627      0.756863  0.752941  0.752941\n 0.164706   0.160784   0.160784   0.156863      0.74902   0.760784  0.776471\n 0.160784   0.156863   0.14902    0.145098      0.737255  0.760784  0.780392\n 0.160784   0.156863   0.14902    0.141176   …  0.733333  0.752941  0.764706\n 0.172549   0.164706   0.152941   0.145098      0.745098  0.756863  0.760784\n 0.180392   0.172549   0.160784   0.14902       0.760784  0.772549  0.772549\n 0.188235   0.176471   0.172549   0.172549      0.807843  0.803922  0.784314\n 0.176471   0.168627   0.164706   0.168627      0.768627  0.756863  0.733333\n 0.164706   0.156863   0.156863   0.164706   …  0.776471  0.756863  0.72549\n 0.152941   0.145098   0.152941   0.160784      0.796078  0.776471  0.745098\n 0.145098   0.141176   0.152941   0.164706      0.772549  0.760784  0.737255\n ⋮                                           ⋱                      \n 0.105882   0.101961   0.0941176  0.0901961     0.188235  0.192157  0.207843\n 0.0901961  0.0901961  0.0862745  0.0823529     0.203922  0.196078  0.192157\n 0.0823529  0.0823529  0.0784314  0.0784314  …  0.282353  0.258824  0.247059\n 0.0784314  0.0784314  0.0784314  0.0784314     0.360784  0.333333  0.317647\n 0.0823529  0.0823529  0.0823529  0.0784314     0.243137  0.184314  0.211765\n 0.0823529  0.0784314  0.0784314  0.0745098     0.215686  0.133333  0.137255\n 0.0823529  0.0823529  0.0745098  0.0705882     0.188235  0.109804  0.109804\n 0.0941176  0.0901961  0.0823529  0.0745098  …  0.160784  0.117647  0.137255\n 0.109804   0.101961   0.0941176  0.0823529     0.121569  0.117647  0.160784\n 0.121569   0.113725   0.0980392  0.0862745     0.101961  0.129412  0.192157\n 0.121569   0.113725   0.0980392  0.0823529     0.12549   0.141176  0.184314\n 0.121569   0.109804   0.0941176  0.0784314     0.160784  0.133333  0.12549"
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#image-compression-using-svd",
    "href": "pages/CLA/slides/Lec1.html#image-compression-using-svd",
    "title": "Computational Linear Algebra",
    "section": "Image compression using SVD",
    "text": "Image compression using SVD\n\nusing LinearAlgebra \nU,S,V = svd(Float64.(Gray.(catimg)));\n\n\nReconstructing the image using the singular values\n\n\nRGB.(U*diagm(S)*V')"
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#image-compression-using-svd-1",
    "href": "pages/CLA/slides/Lec1.html#image-compression-using-svd-1",
    "title": "Computational Linear Algebra",
    "section": "Image compression using SVD",
    "text": "Image compression using SVD\n\nfunction compressimg(n)\n    RGB.(U[:,1:n]*diagm(S[1:n])*V[:,1:n]')\nend\n\ncompressimg (generic function with 1 method)\n\n\n\ncompressimg(10)\n\n\nExample 4.2.3 (page 110)"
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#whats-the-optimal-number-of-features",
    "href": "pages/CLA/slides/Lec1.html#whats-the-optimal-number-of-features",
    "title": "Computational Linear Algebra",
    "section": "What’s the optimal number of features?",
    "text": "What’s the optimal number of features?\n\nusing GRUtils \nSNorm = S ./norm(S)\nplot(1:length(S),SNorm, title=\"Scree Plot\", \n        xlabel = \"Singular Value IDs\",\n        ylabel = \"Singular Values\", grid=false)"
  },
  {
    "objectID": "pages/CLA/slides/Lec1.html#svd-as-recoding-strategy-image-example",
    "href": "pages/CLA/slides/Lec1.html#svd-as-recoding-strategy-image-example",
    "title": "Computational Linear Algebra",
    "section": "SVD as recoding strategy (Image Example)",
    "text": "SVD as recoding strategy (Image Example)\n\nusing Glob # For reading multiple files in a folder \nusing Pipe: @pipe\nfunction recodeimage(pathtoimage)\n    # The following code block looks for .jpg/.JPG/.png/.PNG files and create a list of them \n    imagelist = glob(\"*.jpg\", pathtoimage)  \n    append!(imagelist,  glob(\"*.JPG\", pathtoimage))\n    append!(imagelist,  glob(\"*.png\", pathtoimage)) \n    append!(imagelist,  glob(\"*.PNG\", pathtoimage))\n\n\n    # Algorithm for scree plot ===================================================================================\n    # creating a temporary array of arrays to hold the numerical values of the grayscaled images \n    # temp[1] will have the grayscaled information of image 1, and so on...\n    temp = Array{Array{Float64,2},1}(undef,length(imagelist))\n    \n    # @showprogress is a macro to print the progress of this loop when this function is run \n        for i in 1:length(imagelist)\n        temp[i] = Float64.(Gray.(imresize(load(imagelist[i]),128,128))) \n        # @pipe is a macro for chaining multiple tasks\n        # the next two blocks of code takes the image, converts it into grayscale and compute \n        # the singular values, then only the first n_singular values are stored in the recodedArray    \n        #img_singluar = @pipe X |> Float64.(Gray.(_)) |> svdvals(_)[1:n_singularvlas]' \n        #recodedArray = vcat(recodedArray, img_singluar) \n    end\n    \n    # stacking individual images to create a giant image matrix \n    stackedX = vcat(temp...)\n    println(\"Running Singular Value Decomposition...\")\n    U,S,V= svd(stackedX)\n    S = S ./norm(S)\n    screeplot(S)\n    # ============================================================================================================\n    \n    # After examining the scree plot, the user decides the no. of singular values \n    n_singularvlas = input(\"No. of Features (due to bug in the code that reads user inputs, you might have to enter the no twice, if the program didn't run first time)\")\n    \n    # Initializing an empty array to store the n_singular values of the images \n    recodedArray = Array{Float64}(undef, 0, n_singularvlas) \n    # computing singular values using only the first n_singulars \n    for imagearrays in temp\n        img_singular = @pipe imagearrays |> svdvals(_)[1:n_singularvlas]'\n        recodedArray = vcat(recodedArray, img_singular)\n    end\n\n    # Normalizing the singular values \n    recodedArray =  eachcol(recodedArray) ./ norm.(eachcol(recodedArray))\n    # writing the array as a .csv file \n    filename = joinpath(pathtoimage, \"image_recoded.csv\")\n    CSV.write(filename,  DataFrame(recodedArray, :auto), writeheader=true)\nend\n\nrecodeimage (generic function with 1 method)"
  },
  {
    "objectID": "pages/julia-getting-started.html",
    "href": "pages/julia-getting-started.html",
    "title": "Getting Started in Julia",
    "section": "",
    "text": "(If you are new to programming)\n\nJulia Installation & Setup (Part of Introduction to Julia Machine Learning book)\n\n\n\n\n(If you are proficient in Python/MATLAB/R)\n\n[Cheatsheet] Comparison of basic statistics/linear algebra in Python/Julia/MATLAB\n[Official Documentation] Julia’s noteworthy differences from other languages\n[MIT Opencourseware] Introduction to Computational Thinking\n[Online Book & Lectures] Introduction to Parallel Computing and Scientific Machine Learning\n\n\n\n\n(If you have developed APIs and software in other languages)\n\n[Book] Kwong, T. (2020). Hands-On Design Patterns and Best Practices with Julia: Proven solutions to common problems in software design for Julia 1. x. Packt Publishing Ltd.\n[Book] Balbaert, I., Sengupta, A., & Sherrington, M. (2016). Julia: High Performance Programming. Packt Publishing Ltd."
  },
  {
    "objectID": "pages/julia-getting-started.html#packages-for-computational-modeling",
    "href": "pages/julia-getting-started.html#packages-for-computational-modeling",
    "title": "Getting Started in Julia",
    "section": "Packages for Computational Modeling",
    "text": "Packages for Computational Modeling\nYou can search through the list of all registered julia package here.\n\nList of packages for basic modeling (Linear Models, Clustering, Hypothesis Testing, etc.)\nMainstream Machine Learning\n\nScikitLearn.jl\n\n[Learning Resource] Sudheesh, A. (2022). Introduction to Julia Machine Learning\n\nMLJ.jl\n\nNeural Networks\n\nFlux.jl\n\nList of packages for all sorts of optimization\nDifferential Equations based Modeling\n\nDynamicalSystems.jl\nDiffEq.jl\n\nBayesian Inference & Probabilistic Programming\n\nTuring.jl\n\nProbablistic Graphical Models\n\nBayesNet.jl\nJunctionTrees.jl\nMarkov Decision Process POMDPs.jl"
  },
  {
    "objectID": "pages/juliaup-setup.html",
    "href": "pages/juliaup-setup.html",
    "title": "Julia Setup via juliaup",
    "section": "",
    "text": "Go to Microsoft App store and Install Julia App.\nDownload and Install VS Code.\nInstall the Julia VS Code Extension. \nAfter installation, the “install button” will turn into a gear icon. Once you click on the gear icon, a dropdown menu will popup. From that list, choose Extension Settings.\nWithout unselecting the text on the extension search bar, type exe. Make sure the Julia: Executable Path field is completely blank. \nTo start a Julia session inside VS Code, press Ctrl + Shift + P. From the dropdown list, choose Julia: Start REPL\nIf you want to start Julia REPL without VS Code, you go to your command line and type julia and hit enter.\n\n\n\nJuliaup is a Julia version manager and is automatically installed when you install the Julia App from Microsoft App Store. Juliaup lets you add, update, and remove different Julia versions very easily.\nTo use juliaup, you open your command line and type juliaup and the command you want to run.\n\njuliaup status prints all the julia version installed in your PC.\njuliaup add release installed the latest stable version of Julia.\njuliaup add 1.8.3 will install Julia 1.8.3.\n\nTo see the list of available julia version, run juliaup list\n\njuliaup default 1.8.3 sets the default version of Julia in your PC as Julia 1.8.3. This also defines what version of Julia will be called while you start a Julia session in VS Code.\njuliaup remove 1.8.3 will remove Julia 1.8.3 from your PC."
  },
  {
    "objectID": "pages/juliaup-setup.html#mac-user",
    "href": "pages/juliaup-setup.html#mac-user",
    "title": "Julia Setup via juliaup",
    "section": "2 Mac User",
    "text": "2 Mac User\n\nInstall homebrew package manager for Mac\n\nTo install homebrew, you can copy-past and run the below code on your terminal:\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nInstall Juliaup via homebrew\n\nRun the following code in your terminal:\nbrew install juliaup\n\nFollow instructions in Section 1.1 to install/remove a particular version of Julia."
  },
  {
    "objectID": "pages/r-packagelist.html",
    "href": "pages/r-packagelist.html",
    "title": "R Packages & Related Learning Resources",
    "section": "",
    "text": "An extensive list of R software for psychometric modeling can be found here.\n\nCognitive Diagnsotic Modeling\n\nCDM [Package Home Page]\n\n[Tutorial Paper] Ravand, H., & Robitzsch, A. (2015). Cognitive diagnostic modeling using R. Practical Assessment, Research, and Evaluation, 20(1), 11.\n[Tutorial Paper] George, A. C., & Robitzsch, A. (2015). Cognitive diagnosis models in R: A didactic. The Quantitative Methods for Psychology, 11(3), 189-205.\n\nGDINA [Package Home Page]\n\n[Tutorial Paper] Ma, W., & de la Torre, J. (2020). GDINA: An R package for cognitive diagnosis modeling. Journal of Statistical Software, 93, 1-26.\n\n\n[A Comparison of Software Packages Available for DINA] Sen, S., & Terzi, R. (2020). A comparison of software packages available for DINA model estimation. Applied Psychological Measurement, 44(2), 150-164.\n[Tutorial Paper on implementing CDMs using probablisitic programming in R] Zhan, P., Jiao, H., Man, K., & Wang, L. (2019). Using JAGS for Bayesian cognitive diagnosis modeling: A tutorial. Journal of Educational and Behavioral Statistics, 44(4), 473-503.\n\n\nBayesian Networks in Educational Assessment.\nA general documentation on bayesian networks in educational assessment can be found here.\n\nRNetica [Package Home Page]\nCPTtools [Package Home Page]"
  }
]